Prefix(:=<http://www.co-ode.org/ontologies/pizza/pizza.owl#>)
Prefix(owl:=<http://www.w3.org/2002/07/owl#>)
Prefix(rdf:=<http://www.w3.org/1999/02/22-rdf-syntax-ns#>)
Prefix(xml:=<http://www.w3.org/XML/1998/namespace>)
Prefix(xsd:=<http://www.w3.org/2001/XMLSchema#>)
Prefix(rdfs:=<http://www.w3.org/2000/01/rdf-schema#>)
Ontology(<http://www.co-ode.org/ontologies/pizza/pizza.owl>
Annotation(rdfs:comment "An example ontology"@en)
Annotation(owl:versionInfo "v.1.4."@en)
Annotation(owl:versionInfo "v.1.5. Removed protege"@en)
Annotation(owl:versionInfo "version 1.5"^^xsd:string)
Declaration(Class(:American))
Declaration(Class(:AmericanHot))
Declaration(Class(:AnchoviesTopping))
Declaration(Class(:ArtichokeTopping))
Declaration(Class(:AsparagusTopping))
Declaration(Class(:Cajun))
Declaration(Class(:CajunSpiceTopping))
Declaration(Class(:CaperTopping))
Declaration(Class(:Capricciosa))
Declaration(Class(:Caprina))
Declaration(Class(:CheeseTopping))
Declaration(Class(:CheeseyPizza))
Declaration(Class(:CheeseyVegetableTopping))
Declaration(Class(:ChickenTopping))
Declaration(Class(:Country))
Declaration(Class(:DeepPanBase))
Declaration(Class(:DomainConcept))
Declaration(Class(:Fiorentina))
Declaration(Class(:FishTopping))
Declaration(Class(:Food))
Declaration(Class(:FourCheesesTopping))
Declaration(Class(:FourSeasons))
Declaration(Class(:FruitTopping))
Declaration(Class(:FruttiDiMare))
Declaration(Class(:GarlicTopping))
Declaration(Class(:Giardiniera))
Declaration(Class(:GoatsCheeseTopping))
Declaration(Class(:GorgonzolaTopping))
Declaration(Class(:GreenPepperTopping))
Declaration(Class(:HamTopping))
Declaration(Class(:HerbSpiceTopping))
Declaration(Class(:Hot))
Declaration(Class(:HotGreenPepperTopping))
Declaration(Class(:HotSpicedBeefTopping))
Declaration(Class(:IceCream))
Declaration(Class(:InterestingPizza))
Declaration(Class(:JalapenoPepperTopping))
Declaration(Class(:LaReine))
Declaration(Class(:LeekTopping))
Declaration(Class(:Margherita))
Declaration(Class(:MeatTopping))
Declaration(Class(:MeatyPizza))
Declaration(Class(:Medium))
Declaration(Class(:Mild))
Declaration(Class(:MixedSeafoodTopping))
Declaration(Class(:MozzarellaTopping))
Declaration(Class(:Mushroom))
Declaration(Class(:MushroomTopping))
Declaration(Class(:NamedPizza))
Declaration(Class(:Napoletana))
Declaration(Class(:NonVegetarianPizza))
Declaration(Class(:NutTopping))
Declaration(Class(:OliveTopping))
Declaration(Class(:OnionTopping))
Declaration(Class(:ParmaHamTopping))
Declaration(Class(:Parmense))
Declaration(Class(:ParmesanTopping))
Declaration(Class(:PeperonataTopping))
Declaration(Class(:PeperoniSausageTopping))
Declaration(Class(:PepperTopping))
Declaration(Class(:PetitPoisTopping))
Declaration(Class(:PineKernels))
Declaration(Class(:Pizza))
Declaration(Class(:PizzaBase))
Declaration(Class(:PizzaTopping))
Declaration(Class(:PolloAdAstra))
Declaration(Class(:PrawnsTopping))
Declaration(Class(:PrinceCarlo))
Declaration(Class(:QuattroFormaggi))
Declaration(Class(:RealItalianPizza))
Declaration(Class(:RedOnionTopping))
Declaration(Class(:RocketTopping))
Declaration(Class(:Rosa))
Declaration(Class(:RosemaryTopping))
Declaration(Class(:SauceTopping))
Declaration(Class(:Siciliana))
Declaration(Class(:SlicedTomatoTopping))
Declaration(Class(:SloppyGiuseppe))
Declaration(Class(:Soho))
Declaration(Class(:Spiciness))
Declaration(Class(:SpicyPizza))
Declaration(Class(:SpicyPizzaEquivalent))
Declaration(Class(:SpicyTopping))
Declaration(Class(:SpinachTopping))
Declaration(Class(:SultanaTopping))
Declaration(Class(:SundriedTomatoTopping))
Declaration(Class(:SweetPepperTopping))
Declaration(Class(:ThinAndCrispyBase))
Declaration(Class(:ThinAndCrispyPizza))
Declaration(Class(:TobascoPepperSauce))
Declaration(Class(:TomatoTopping))
Declaration(Class(:UnclosedPizza))
Declaration(Class(:ValuePartition))
Declaration(Class(:VegetableTopping))
Declaration(Class(:VegetarianPizza))
Declaration(Class(:VegetarianPizzaEquivalent1))
Declaration(Class(:VegetarianPizzaEquivalent2))
Declaration(Class(:VegetarianTopping))
Declaration(Class(:Veneziana))
Declaration(Class(<urn:classexpression>))
Declaration(Class(<urn:iri>))
Declaration(ObjectProperty(:hasBase))
Declaration(ObjectProperty(:hasCountryOfOrigin))
Declaration(ObjectProperty(:hasIngredient))
Declaration(ObjectProperty(:hasSpiciness))
Declaration(ObjectProperty(:hasTopping))
Declaration(ObjectProperty(:isBaseOf))
Declaration(ObjectProperty(:isIngredientOf))
Declaration(ObjectProperty(:isToppingOf))
Declaration(ObjectProperty(<urn:op>))
Declaration(DataProperty(<urn:dp>))
Declaration(DataProperty(<urn:testdp>))
Declaration(NamedIndividual(:America))
Declaration(NamedIndividual(:England))
Declaration(NamedIndividual(:France))
Declaration(NamedIndividual(:Germany))
Declaration(NamedIndividual(:Italy))
Declaration(NamedIndividual(<urn:iri>))
Declaration(AnnotationProperty(<urn:ap>))
SubAnnotationPropertyOf(<urn:ap> <urn:ap>)
AnnotationPropertyRange(<urn:ap> <urn:iri>)
AnnotationPropertyDomain(<urn:ap> <urn:iri>)
SubObjectPropertyOf(:hasBase :hasIngredient)
InverseObjectProperties(:hasBase :isBaseOf)
FunctionalObjectProperty(:hasBase)
InverseFunctionalObjectProperty(:hasBase)
ObjectPropertyDomain(:hasBase :Pizza)
ObjectPropertyRange(:hasBase :PizzaBase)
InverseObjectProperties(:hasIngredient :isIngredientOf)
TransitiveObjectProperty(:hasIngredient)
ObjectPropertyDomain(:hasIngredient :Food)
ObjectPropertyRange(:hasIngredient :Food)
FunctionalObjectProperty(:hasSpiciness)
ObjectPropertyRange(:hasSpiciness :Spiciness)
SubObjectPropertyOf(:hasTopping :hasIngredient)
InverseObjectProperties(:hasTopping :isToppingOf)
InverseFunctionalObjectProperty(:hasTopping)
ObjectPropertyDomain(:hasTopping :Pizza)
ObjectPropertyRange(:hasTopping :PizzaTopping)
SubObjectPropertyOf(:isBaseOf :isIngredientOf)
FunctionalObjectProperty(:isBaseOf)
InverseFunctionalObjectProperty(:isBaseOf)
ObjectPropertyDomain(:isBaseOf :PizzaBase)
ObjectPropertyRange(:isBaseOf :Pizza)
TransitiveObjectProperty(:isIngredientOf)
ObjectPropertyDomain(:isIngredientOf :Food)
ObjectPropertyRange(:isIngredientOf :Food)
SubObjectPropertyOf(:isToppingOf :isIngredientOf)
FunctionalObjectProperty(:isToppingOf)
ObjectPropertyDomain(:isToppingOf :PizzaTopping)
ObjectPropertyRange(:isToppingOf :Pizza)
SubObjectPropertyOf(<urn:op> <urn:op>)
InverseObjectProperties(<urn:op> <urn:op>)
InverseObjectProperties(<urn:op> ObjectInverseOf(<urn:op>))
FunctionalObjectProperty(<urn:op>)
InverseFunctionalObjectProperty(<urn:op>)
SymmetricObjectProperty(<urn:op>)
AsymmetricObjectProperty(<urn:op>)
TransitiveObjectProperty(<urn:op>)
ReflexiveObjectProperty(<urn:op>)
IrreflexiveObjectProperty(<urn:op>)
ObjectPropertyDomain(<urn:op> <urn:classexpression>)
ObjectPropertyRange(<urn:op> <urn:classexpression>)
SubDataPropertyOf(<urn:dp> <urn:dp>)
FunctionalDataProperty(<urn:dp>)
DataPropertyDomain(<urn:dp> <urn:classexpression>)
DataPropertyRange(<urn:dp> xsd:int)
DataPropertyRange(<urn:dp> <testString>)
DataPropertyRange(<urn:dp> DataOneOf("true"^^xsd:boolean))
DataPropertyRange(<urn:dp> xsd:int)
DataPropertyRange(<urn:testdp> DatatypeRestriction(xsd:date xsd:maxInclusive "1971-09-24"^^xsd:date xsd:minInclusive "1970-10-22"^^xsd:date))
DataPropertyRange(<urn:testdp> DatatypeRestriction(xsd:date xsd:minInclusive "1973-09-24"^^xsd:date xsd:maxInclusive "1974-10-22"^^xsd:date))
SubClassOf(:American :NamedPizza)
SubClassOf(:American ObjectSomeValuesFrom(:hasTopping :MozzarellaTopping))
SubClassOf(:American ObjectSomeValuesFrom(:hasTopping :PeperoniSausageTopping))
SubClassOf(:American ObjectSomeValuesFrom(:hasTopping :TomatoTopping))
SubClassOf(:American ObjectAllValuesFrom(:hasTopping ObjectUnionOf(:MozzarellaTopping :PeperoniSausageTopping :TomatoTopping)))
SubClassOf(:American ObjectHasValue(:hasCountryOfOrigin :America))
SubClassOf(:ArtichokeTopping :VegetableTopping)
SubClassOf(:ArtichokeTopping ObjectSomeValuesFrom(:hasSpiciness :Mild))
AnnotationAssertion(rdfs:label :Cajun "Cajun"@pt)
AnnotationAssertion(rdfs:comment :Cajun "Cajun"@pt)
AnnotationAssertion(rdfs:label :Cajun "A Cajun test"@pt)
AnnotationAssertion(rdfs:comment :Cajun "A Cajun test"@pt)
SubClassOf(:Cajun ObjectAllValuesFrom(:hasTopping ObjectUnionOf(:MozzarellaTopping :OnionTopping :PeperonataTopping :PrawnsTopping :TobascoPepperSauce :TomatoTopping)))
SubClassOf(:Capricciosa ObjectAllValuesFrom(:hasTopping ObjectUnionOf(:AnchoviesTopping :CaperTopping :HamTopping :MozzarellaTopping :OliveTopping :PeperonataTopping :TomatoTopping)))
DisjointClasses(:Capricciosa :Caprina)
DisjointClasses(:Capricciosa :Fiorentina)
DisjointClasses(:Capricciosa :FourSeasons)
DisjointClasses(:Capricciosa :FruttiDiMare)
DisjointClasses(:Capricciosa :Giardiniera)
DisjointClasses(:Capricciosa :LaReine)
DisjointClasses(:Capricciosa :Margherita)
DisjointClasses(:Capricciosa :Mushroom)
DisjointClasses(:Capricciosa :Napoletana)
DisjointClasses(:Capricciosa :Parmense)
DisjointClasses(:Capricciosa :PolloAdAstra)
DisjointClasses(:Capricciosa :PrinceCarlo)
DisjointClasses(:Capricciosa :QuattroFormaggi)
DisjointClasses(:Capricciosa :Rosa)
DisjointClasses(:Capricciosa :Siciliana)
DisjointClasses(:Capricciosa :SloppyGiuseppe)
DisjointClasses(:Capricciosa :Soho)
DisjointClasses(:Capricciosa :UnclosedPizza)
DisjointClasses(:Capricciosa :Veneziana)
AnnotationAssertion(rdfs:comment :CheeseyPizza "Any pizza that has at least 1 cheese topping."@en)
AnnotationAssertion(rdfs:label :CheeseyPizza "PizzaComQueijo"@pt)
EquivalentClasses(:CheeseyPizza ObjectIntersectionOf(:Pizza ObjectSomeValuesFrom(:hasTopping :CheeseTopping)))
AnnotationAssertion(rdfs:comment :CheeseyVegetableTopping "This class will be inconsistent. This is because we have given it 2 disjoint parents, which means it could never have any members (as nothing can simultaneously be a CheeseTopping and a VegetableTopping). NB Called ProbeInconsistentTopping in the ProtegeOWL Tutorial."@en)
AnnotationAssertion(rdfs:label :CheeseyVegetableTopping "CoberturaDeQueijoComVegetais"@pt)
SubClassOf(:CheeseyVegetableTopping :CheeseTopping)
SubClassOf(:CheeseyVegetableTopping :VegetableTopping)
AnnotationAssertion(rdfs:comment :Country "A class that is equivalent to the set of individuals that are described in the enumeration - ie Countries can only be either America, England, France, Germany or Italy and nothing else. Note that these individuals have been asserted to be allDifferent from each other."@en)
AnnotationAssertion(rdfs:label :Country "Pais"@pt)
EquivalentClasses(:Country ObjectIntersectionOf(:DomainConcept ObjectOneOf(:America :England :France :Germany :Italy)))
SubClassOf(:Giardiniera ObjectSomeValuesFrom(:hasTopping :LeekTopping))
SubClassOf(:Giardiniera ObjectSomeValuesFrom(:hasTopping :MozzarellaTopping))
SubClassOf(:Giardiniera ObjectSomeValuesFrom(:hasTopping :MushroomTopping))
SubClassOf(:Giardiniera ObjectSomeValuesFrom(:hasTopping :OliveTopping))
DisjointClasses(:Giardiniera :LaReine :Margherita :Mushroom :Napoletana :Parmense :PolloAdAstra)
EquivalentClasses(:InterestingPizza ObjectIntersectionOf(:Pizza ObjectMinCardinality(3 :hasTopping)))
SubClassOf(:LaReine ObjectSomeValuesFrom(:hasTopping :TomatoTopping))
SubClassOf(:LaReine ObjectAllValuesFrom(:hasTopping ObjectIntersectionOf(:HamTopping :MozzarellaTopping :MushroomTopping :OliveTopping :TomatoTopping)))
EquivalentClasses(:MeatyPizza ObjectIntersectionOf(:Pizza ObjectSomeValuesFrom(:hasTopping :MeatTopping)))
SubClassOf(:Napoletana ObjectSomeValuesFrom(:hasTopping :TomatoTopping))
SubClassOf(:Napoletana ObjectHasValue(:hasCountryOfOrigin :Italy))
EquivalentClasses(:NonVegetarianPizza ObjectIntersectionOf(:Pizza ObjectComplementOf(:VegetarianPizza)))
EquivalentClasses(:RealItalianPizza ObjectIntersectionOf(:Pizza ObjectHasValue(:hasCountryOfOrigin :Italy)))
EquivalentClasses(:Spiciness ObjectUnionOf(:Hot :Medium :Mild))
EquivalentClasses(:SpicyPizza ObjectIntersectionOf(:Pizza ObjectSomeValuesFrom(:hasTopping :SpicyTopping)))
EquivalentClasses(:SpicyPizzaEquivalent ObjectIntersectionOf(:Pizza ObjectSomeValuesFrom(:hasTopping ObjectIntersectionOf(:PizzaTopping ObjectSomeValuesFrom(:hasSpiciness :Hot)))))
EquivalentClasses(:SpicyTopping ObjectIntersectionOf(:PizzaTopping ObjectSomeValuesFrom(:hasSpiciness :Hot)))
EquivalentClasses(:ThinAndCrispyPizza ObjectIntersectionOf(:Pizza ObjectAllValuesFrom(:hasBase :ThinAndCrispyBase)))
EquivalentClasses(:VegetarianPizza ObjectIntersectionOf(:Pizza ObjectComplementOf(ObjectSomeValuesFrom(:hasTopping :FishTopping)) ObjectComplementOf(ObjectSomeValuesFrom(:hasTopping :MeatTopping))))
EquivalentClasses(:VegetarianPizzaEquivalent1 ObjectIntersectionOf(:Pizza ObjectAllValuesFrom(:hasTopping :VegetarianTopping)))
EquivalentClasses(:VegetarianPizzaEquivalent2 ObjectIntersectionOf(:Pizza ObjectAllValuesFrom(:hasTopping ObjectUnionOf(:CheeseTopping :FruitTopping :HerbSpiceTopping :NutTopping :SauceTopping :VegetableTopping))))
EquivalentClasses(:VegetarianTopping ObjectIntersectionOf(:PizzaTopping ObjectUnionOf(:CheeseTopping :FruitTopping :HerbSpiceTopping :NutTopping :SauceTopping :VegetableTopping)))
EquivalentClasses(<urn:classexpression> <urn:iri>)
SubClassOf(<urn:classexpression> <testString>)
SubClassOf(<urn:classexpression> ObjectIntersectionOf(<testString> <urn:classexpression>))
SubClassOf(<urn:classexpression> ObjectOneOf(<urn:iri>))
SubClassOf(<urn:classexpression> ObjectSomeValuesFrom(<urn:op> <urn:classexpression>))
SubClassOf(<urn:classexpression> ObjectAllValuesFrom(<urn:op> <urn:classexpression>))
SubClassOf(<urn:classexpression> ObjectHasValue(<urn:op> _:genid1))
SubClassOf(<urn:classexpression> ObjectMinCardinality(1 <urn:op>))
SubClassOf(<urn:classexpression> ObjectExactCardinality(1 <urn:op>))
SubClassOf(<urn:classexpression> ObjectMaxCardinality(1 <urn:op>))
SubClassOf(<urn:classexpression> DataSomeValuesFrom(<urn:dp> xsd:int))
SubClassOf(<urn:classexpression> DataAllValuesFrom(<urn:dp> xsd:int))
SubClassOf(<urn:classexpression> DataHasValue(<urn:dp> "true"^^xsd:boolean))
SubClassOf(<urn:classexpression> DataMinCardinality(1 <urn:dp>))
SubClassOf(<urn:classexpression> DataExactCardinality(1 <urn:dp>))
SubClassOf(<urn:classexpression> DataMaxCardinality(1 <urn:dp>))
ClassAssertion(:Country :America)
ClassAssertion(owl:Thing :America)
ClassAssertion(:Country :England)
ClassAssertion(owl:Thing :England)
ClassAssertion(:Country :France)
ClassAssertion(owl:Thing :France)
ClassAssertion(:Country :Germany)
ClassAssertion(owl:Thing :Germany)
ClassAssertion(:Country :Italy)
ClassAssertion(owl:Thing :Italy)
ClassAssertion(<urn:classexpression> _:genid1)
DifferentIndividuals(:America :England :France :Germany :Italy)
ObjectPropertyAssertion(<urn:op> _:genid1 _:genid1)
ObjectPropertyAssertion(<urn:op> _:genid2 _:genid2)
NegativeObjectPropertyAssertion(<urn:op> _:genid1 _:genid1)
NegativeObjectPropertyAssertion(<urn:op> _:genid2 _:genid2)
DataPropertyAssertion(<urn:dp> _:genid1 "testString"^^xsd:int)
DataPropertyAssertion(<urn:dp> _:genid1 "true"^^xsd:boolean)
NegativeDataPropertyAssertion(<urn:dp> _:genid1 "true"^^xsd:boolean)
AnnotationAssertion(<urn:ap> <urn:i> "true"^^xsd:boolean))

Prefix(:=<http://www.co-ode.org/ontologies/pizza/pizza.owl#>)
Prefix(owl:=<http://www.w3.org/2002/07/owl#>)
Prefix(rdf:=<http://www.w3.org/1999/02/22-rdf-syntax-ns#>)
Prefix(xsd:=<http://www.w3.org/2001/XMLSchema#>)
Prefix(rdfs:=<http://www.w3.org/2000/01/rdf-schema#>)
Prefix(xml:=<http://www.w3.org/XML/1998/namespace>)
Ontology(<http://www.co-ode.org/ontologies/pizza/pizza.owl>
Annotation(owl:versionInfo "version 1.5"^^xsd:string)
Annotation(rdfs:comment "An example ontology"@en)
Annotation(owl:versionInfo "v.1.5. Removed protege"@en)
Annotation(owl:versionInfo "v.1.4."@en)
Declaration(DataProperty(<urn:testdp>))
Declaration(Class(:AmericanHot))
Declaration(Class(:AnchoviesTopping))
Declaration(Class(:ArtichokeTopping))
Declaration(Class(:AsparagusTopping))
Declaration(Class(:Cajun))
Declaration(Class(:CajunSpiceTopping))
Declaration(Class(:CaperTopping))
Declaration(Class(:Capricciosa))
Declaration(Class(:Caprina))
Declaration(Class(:CheeseTopping))
Declaration(Class(:CheeseyPizza))
Declaration(Class(:CheeseyVegetableTopping))
Declaration(Class(:ChickenTopping))
Declaration(Class(:Country))
Declaration(Class(:DeepPanBase))
Declaration(Class(:DomainConcept))
Declaration(Class(:Fiorentina))
Declaration(Class(:FishTopping))
Declaration(Class(:Food))
Declaration(Class(:FourCheesesTopping))
Declaration(Class(:FourSeasons))
Declaration(Class(:FruitTopping))
Declaration(Class(:FruttiDiMare))
Declaration(Class(:GarlicTopping))
Declaration(Class(:Giardiniera))
Declaration(Class(:GoatsCheeseTopping))
Declaration(Class(:GorgonzolaTopping))
Declaration(Class(:GreenPepperTopping))
Declaration(Class(:HamTopping))
Declaration(Class(:HerbSpiceTopping))
Declaration(Class(:Hot))
Declaration(Class(:HotGreenPepperTopping))
Declaration(Class(:HotSpicedBeefTopping))
Declaration(Class(:IceCream))
Declaration(Class(:InterestingPizza))
Declaration(Class(:JalapenoPepperTopping))
Declaration(Class(:LaReine))
Declaration(Class(:LeekTopping))
Declaration(Class(:Margherita))
Declaration(Class(:MeatTopping))
Declaration(Class(:MeatyPizza))
Declaration(Class(:Medium))
Declaration(Class(:Mild))
Declaration(Class(:MixedSeafoodTopping))
Declaration(Class(:MozzarellaTopping))
Declaration(Class(:Mushroom))
Declaration(Class(:MushroomTopping))
Declaration(Class(:NamedPizza))
Declaration(Class(:Napoletana))
Declaration(Class(:NonVegetarianPizza))
Declaration(Class(:NutTopping))
Declaration(Class(:OliveTopping))
Declaration(Class(:OnionTopping))
Declaration(Class(:ParmaHamTopping))
Declaration(Class(:Parmense))
Declaration(Class(:ParmesanTopping))
Declaration(Class(:PeperonataTopping))
Declaration(Class(:PeperoniSausageTopping))
Declaration(Class(:PepperTopping))
Declaration(Class(:PetitPoisTopping))
Declaration(Class(:PineKernels))
Declaration(Class(:Pizza))
Declaration(Class(:PizzaBase))
Declaration(Class(:PizzaTopping))
Declaration(Class(:PolloAdAstra))
Declaration(Class(:PrawnsTopping))
Declaration(Class(:PrinceCarlo))
Declaration(Class(:QuattroFormaggi))
Declaration(Class(:RealItalianPizza))
Declaration(Class(:RedOnionTopping))
Declaration(Class(:RocketTopping))
Declaration(Class(:Rosa))
Declaration(Class(:RosemaryTopping))
Declaration(Class(:SauceTopping))
Declaration(Class(:Siciliana))
Declaration(Class(:SlicedTomatoTopping))
Declaration(Class(:SloppyGiuseppe))
Declaration(Class(:Soho))
Declaration(Class(:Spiciness))
Declaration(Class(:SpicyPizza))
Declaration(Class(:SpicyPizzaEquivalent))
Declaration(Class(:SpicyTopping))
Declaration(Class(:SpinachTopping))
Declaration(Class(:SultanaTopping))
Declaration(Class(:SundriedTomatoTopping))
Declaration(Class(:SweetPepperTopping))
Declaration(Class(:ThinAndCrispyBase))
Declaration(Class(:ThinAndCrispyPizza))
Declaration(Class(:TobascoPepperSauce))
Declaration(Class(:TomatoTopping))
Declaration(Class(:UnclosedPizza))
Declaration(Class(:ValuePartition))
Declaration(Class(:VegetableTopping))
Declaration(Class(:VegetarianPizza))
Declaration(Class(:VegetarianPizzaEquivalent1))
Declaration(Class(:VegetarianPizzaEquivalent2))
Declaration(Class(:VegetarianTopping))
Declaration(Class(:Veneziana))
Declaration(Class(<urn:classexpression>))
Declaration(Class(<urn:iri>))
Declaration(ObjectProperty(:hasBase))
Declaration(ObjectProperty(:hasCountryOfOrigin))
Declaration(ObjectProperty(:hasIngredient))
Declaration(ObjectProperty(:hasSpiciness))
Declaration(ObjectProperty(:hasTopping))
Declaration(ObjectProperty(:isBaseOf))
Declaration(ObjectProperty(:isIngredientOf))
Declaration(ObjectProperty(:isToppingOf))
Declaration(ObjectProperty(<urn:op>))
Declaration(DataProperty(<urn:dp>))
Declaration(NamedIndividual(:America))
Declaration(NamedIndividual(:England))
Declaration(NamedIndividual(:France))
Declaration(NamedIndividual(:Germany))
Declaration(NamedIndividual(:Italy))
Declaration(NamedIndividual(<urn:iri>))
Declaration(AnnotationProperty(<urn:ap>))
Declaration(Class(:American))
SubAnnotationPropertyOf(<urn:ap> <urn:ap>)
AnnotationPropertyRange(<urn:ap> <urn:iri>)
AnnotationPropertyDomain(<urn:ap> <urn:iri>)
InverseObjectProperties(:hasBase :isBaseOf)
FunctionalObjectProperty(:hasBase)
InverseFunctionalObjectProperty(:hasBase)
ObjectPropertyDomain(:hasBase :Pizza)
InverseObjectProperties(:hasTopping :isToppingOf)
ObjectPropertyRange(:hasBase :PizzaBase)
TransitiveObjectProperty(:hasIngredient)
ObjectPropertyDomain(:hasIngredient :Food)
ObjectPropertyRange(:hasIngredient :Food)
FunctionalObjectProperty(:hasSpiciness)
SubObjectPropertyOf(:hasBase :hasIngredient)
ObjectPropertyRange(:hasSpiciness :Spiciness)
SubObjectPropertyOf(:hasTopping :hasIngredient)
InverseFunctionalObjectProperty(:hasTopping)
ObjectPropertyDomain(:hasTopping :Pizza)
ObjectPropertyRange(:hasTopping :PizzaTopping)
SubObjectPropertyOf(:isBaseOf :isIngredientOf)
FunctionalObjectProperty(:isBaseOf)
InverseObjectProperties(:hasIngredient :isIngredientOf)
InverseFunctionalObjectProperty(:isBaseOf)
ObjectPropertyDomain(:isBaseOf :PizzaBase)
TransitiveObjectProperty(:isIngredientOf)
ObjectPropertyDomain(:isIngredientOf :Food)
ObjectPropertyRange(:isIngredientOf :Food)
SubObjectPropertyOf(:isToppingOf :isIngredientOf)
FunctionalObjectProperty(:isToppingOf)
ObjectPropertyRange(:isToppingOf :Pizza)
TransitiveObjectProperty(<urn:op>)
SubObjectPropertyOf(<urn:op> <urn:op>)
InverseObjectProperties(<urn:op> <urn:op>)
InverseObjectProperties(<urn:op> ObjectInverseOf(<urn:op>))
FunctionalObjectProperty(<urn:op>)
ObjectPropertyDomain(:isToppingOf :PizzaTopping)
InverseFunctionalObjectProperty(<urn:op>)
ObjectPropertyRange(:isBaseOf :Pizza)
SymmetricObjectProperty(<urn:op>)
AsymmetricObjectProperty(<urn:op>)
ReflexiveObjectProperty(<urn:op>)
IrreflexiveObjectProperty(<urn:op>)
ObjectPropertyDomain(<urn:op> <urn:classexpression>)
ObjectPropertyRange(<urn:op> <urn:classexpression>)
SubDataPropertyOf(<urn:dp> <urn:dp>)
FunctionalDataProperty(<urn:dp>)
DataPropertyDomain(<urn:dp> <urn:classexpression>)
DataPropertyRange(<urn:dp> xsd:int)
DataPropertyRange(<urn:testdp> DatatypeRestriction(xsd:date xsd:maxInclusive "1974-10-22"^^xsd:date xsd:minInclusive "1973-09-24"^^xsd:date))
DataPropertyRange(<urn:testdp> DatatypeRestriction(xsd:date xsd:minInclusive "1970-10-22"^^xsd:date xsd:maxInclusive "1971-09-24"^^xsd:date))
DataPropertyRange(<urn:dp> DataOneOf("true"^^xsd:boolean))
DataPropertyRange(<urn:dp> xsd:int)
DataPropertyRange(<urn:dp> <testString>)
SubClassOf(:American :NamedPizza)
SubClassOf(:American ObjectSomeValuesFrom(:hasTopping :MozzarellaTopping))
SubClassOf(:American ObjectHasValue(:hasCountryOfOrigin :America))
SubClassOf(:ArtichokeTopping :VegetableTopping)
SubClassOf(:ArtichokeTopping ObjectSomeValuesFrom(:hasSpiciness :Mild))
AnnotationAssertion(rdfs:label :Cajun "Cajun"@pt)
AnnotationAssertion(rdfs:comment :Cajun "A Cajun test"@pt)
AnnotationAssertion(rdfs:label :Cajun "A Cajun test"@pt)
SubClassOf(:American ObjectSomeValuesFrom(:hasTopping :PeperoniSausageTopping))
SubClassOf(:American ObjectSomeValuesFrom(:hasTopping :TomatoTopping))
SubClassOf(:American ObjectAllValuesFrom(:hasTopping ObjectUnionOf(:MozzarellaTopping :PeperoniSausageTopping :TomatoTopping)))
AnnotationAssertion(rdfs:comment :Cajun "Cajun"@pt)
SubClassOf(:Cajun ObjectAllValuesFrom(:hasTopping ObjectUnionOf(:MozzarellaTopping :OnionTopping :PeperonataTopping :PrawnsTopping :TobascoPepperSauce :TomatoTopping)))
SubClassOf(:Capricciosa ObjectAllValuesFrom(:hasTopping ObjectUnionOf( :CaperTopping :AnchoviesTopping :HamTopping :MozzarellaTopping :OliveTopping :PeperonataTopping :TomatoTopping)))
DisjointClasses(:Capricciosa :Fiorentina)
DisjointClasses(:Capricciosa :FourSeasons)
DisjointClasses(:Capricciosa :FruttiDiMare)
DisjointClasses(:Capricciosa :Giardiniera)
DisjointClasses(:Capricciosa :LaReine)
DisjointClasses(:Capricciosa :Margherita)
DisjointClasses(:Capricciosa :Mushroom)
DisjointClasses(:Capricciosa :Napoletana)
DisjointClasses(:Capricciosa :Parmense)
DisjointClasses(:Capricciosa :PolloAdAstra)
DisjointClasses(:Capricciosa :PrinceCarlo)
DisjointClasses(:Capricciosa :QuattroFormaggi)
DisjointClasses(:Capricciosa :Rosa)
DisjointClasses(:Capricciosa :Siciliana)
DisjointClasses(:Capricciosa :SloppyGiuseppe)
DisjointClasses(:Capricciosa :Soho)
DisjointClasses(:Capricciosa :UnclosedPizza)
DisjointClasses(:Capricciosa :Caprina)
DisjointClasses(:Capricciosa :Veneziana)
AnnotationAssertion(rdfs:label :CheeseyPizza "PizzaComQueijo"@pt)
AnnotationAssertion(rdfs:comment :CheeseyPizza "Any pizza that has at least 1 cheese topping."@en)
EquivalentClasses(ObjectIntersectionOf(:Pizza ObjectSomeValuesFrom(:hasTopping :CheeseTopping)):CheeseyPizza )
AnnotationAssertion(rdfs:comment :CheeseyVegetableTopping "This class will be inconsistent. This is because we have given it 2 disjoint parents, which means it could never have any members (as nothing can simultaneously be a CheeseTopping and a VegetableTopping). NB Called ProbeInconsistentTopping in the ProtegeOWL Tutorial."@en)
AnnotationAssertion(rdfs:label :CheeseyVegetableTopping "CoberturaDeQueijoComVegetais"@pt)
SubClassOf(:CheeseyVegetableTopping :CheeseTopping)
SubClassOf(:CheeseyVegetableTopping :VegetableTopping)
AnnotationAssertion(rdfs:label :Country "Pais"@pt)
EquivalentClasses(:Country ObjectIntersectionOf(:DomainConcept ObjectOneOf(:America :England :France :Germany :Italy)))
AnnotationAssertion(rdfs:comment :Country "A class that is equivalent to the set of individuals that are described in the enumeration - ie Countries can only be either America, England, France, Germany or Italy and nothing else. Note that these individuals have been asserted to be allDifferent from each other."@en)
SubClassOf(:Giardiniera ObjectSomeValuesFrom(:hasTopping :MushroomTopping))
SubClassOf(:Giardiniera ObjectSomeValuesFrom(:hasTopping :LeekTopping))
DisjointClasses(:Giardiniera :LaReine :Mushroom :Margherita :Napoletana :Parmense :PolloAdAstra)
SubClassOf(:Giardiniera ObjectSomeValuesFrom(:hasTopping :MozzarellaTopping))
SubClassOf(:Giardiniera ObjectSomeValuesFrom(:hasTopping :OliveTopping))
EquivalentClasses(:InterestingPizza ObjectIntersectionOf(:Pizza ObjectMinCardinality(3 :hasTopping)))
SubClassOf(:LaReine ObjectAllValuesFrom(:hasTopping ObjectIntersectionOf(:HamTopping :MozzarellaTopping :MushroomTopping :OliveTopping :TomatoTopping)))
SubClassOf(:LaReine ObjectSomeValuesFrom(:hasTopping :TomatoTopping))
EquivalentClasses(:MeatyPizza ObjectIntersectionOf(:Pizza ObjectSomeValuesFrom(:hasTopping :MeatTopping)))
SubClassOf(:Napoletana ObjectHasValue(:hasCountryOfOrigin :Italy))
EquivalentClasses(:RealItalianPizza ObjectIntersectionOf(:Pizza ObjectHasValue(:hasCountryOfOrigin :Italy)))
EquivalentClasses(:NonVegetarianPizza ObjectIntersectionOf(:Pizza ObjectComplementOf(:VegetarianPizza)))
SubClassOf(:Napoletana ObjectSomeValuesFrom(:hasTopping :TomatoTopping))
EquivalentClasses(:Spiciness ObjectUnionOf(:Medium :Mild :Hot ))
EquivalentClasses(:SpicyPizza ObjectIntersectionOf(:Pizza ObjectSomeValuesFrom(:hasTopping :SpicyTopping)))
EquivalentClasses(:SpicyPizzaEquivalent ObjectIntersectionOf(:Pizza ObjectSomeValuesFrom(:hasTopping ObjectIntersectionOf(:PizzaTopping ObjectSomeValuesFrom(:hasSpiciness :Hot)))))
EquivalentClasses(:SpicyTopping ObjectIntersectionOf(:PizzaTopping ObjectSomeValuesFrom(:hasSpiciness :Hot)))
EquivalentClasses(:ThinAndCrispyPizza ObjectIntersectionOf(ObjectAllValuesFrom( :hasBase :ThinAndCrispyBase) :Pizza ))
EquivalentClasses(:VegetarianPizzaEquivalent1 ObjectIntersectionOf(:Pizza ObjectAllValuesFrom(:hasTopping :VegetarianTopping)))
EquivalentClasses(:VegetarianPizzaEquivalent2 ObjectIntersectionOf(:Pizza ObjectAllValuesFrom(:hasTopping ObjectUnionOf(:CheeseTopping :FruitTopping :HerbSpiceTopping :NutTopping :SauceTopping :VegetableTopping))))
EquivalentClasses(:VegetarianPizza ObjectIntersectionOf(:Pizza ObjectComplementOf(ObjectSomeValuesFrom(:hasTopping :FishTopping)) ObjectComplementOf(ObjectSomeValuesFrom(:hasTopping :MeatTopping))))
EquivalentClasses(<urn:classexpression> <urn:iri>)
EquivalentClasses(ObjectIntersectionOf( ObjectUnionOf(:CheeseTopping :FruitTopping :HerbSpiceTopping :SauceTopping :NutTopping  :VegetableTopping) :PizzaTopping) :VegetarianTopping )
SubClassOf(<urn:classexpression> ObjectIntersectionOf(<testString> <urn:classexpression>))
SubClassOf(<urn:classexpression> ObjectOneOf(<urn:iri>))
SubClassOf(<urn:classexpression> ObjectSomeValuesFrom(<urn:op> <urn:classexpression>))
SubClassOf(<urn:classexpression> ObjectAllValuesFrom(<urn:op> <urn:classexpression>))
SubClassOf(<urn:classexpression> ObjectHasValue(<urn:op> _:genid1))
SubClassOf(<urn:classexpression> ObjectMinCardinality(1 <urn:op>))
SubClassOf(<urn:classexpression> ObjectExactCardinality(1 <urn:op>))
SubClassOf(<urn:classexpression> ObjectMaxCardinality(1 <urn:op>))
SubClassOf(<urn:classexpression> DataSomeValuesFrom(<urn:dp> xsd:int))
SubClassOf(<urn:classexpression> DataAllValuesFrom(<urn:dp> xsd:int))
SubClassOf(<urn:classexpression> DataHasValue(<urn:dp> "true"^^xsd:boolean))
SubClassOf(<urn:classexpression> DataMinCardinality(1 <urn:dp>))
SubClassOf(<urn:classexpression> DataExactCardinality(1 <urn:dp>))
SubClassOf(<urn:classexpression> DataMaxCardinality(1 <urn:dp>))
SubClassOf(<urn:classexpression> <testString>)
ClassAssertion(owl:Thing :America)
ClassAssertion(:Country :England)
ClassAssertion(owl:Thing :England)
ClassAssertion(:Country :France)
ClassAssertion(owl:Thing :France)
ClassAssertion(:Country :Germany)
ClassAssertion(owl:Thing :Germany)
ClassAssertion(:Country :Italy)
ClassAssertion(owl:Thing :Italy)
ClassAssertion(:Country :America)
ObjectPropertyAssertion(<urn:op> _:genid1 _:genid1)
ObjectPropertyAssertion(<urn:op> _:genid2 _:genid2)
NegativeDataPropertyAssertion(<urn:dp> _:genid1 "true"^^xsd:boolean)
NegativeObjectPropertyAssertion(<urn:op> _:genid1 _:genid1)
ClassAssertion(<urn:classexpression> _:genid1)
NegativeObjectPropertyAssertion(<urn:op> _:genid2 _:genid2)
DifferentIndividuals(:America :Germany :England :France :Italy)
DataPropertyAssertion(<urn:dp> _:genid1 "testString"^^xsd:int)
DataPropertyAssertion(<urn:dp> _:genid1 "true"^^xsd:boolean)
AnnotationAssertion(<urn:ap> <urn:i> "true"^^xsd:boolean))